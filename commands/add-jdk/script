#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: jenkins:add-jdk: "Adds a JDK installation to the Jenkins configuration"
#/ usage: rerun jenkins:add-jdk [ --jdk-name <java-sdk>] [ --jdk-home|-j </etc/alternatives/java_sdk>] [ --jenkins-home </var/lib/jenkins>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh add-jdk || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: jenkins:add-jdk. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: JDK_NAME JDK_HOME JENKINS_HOME

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

if [ ! -f "${JENKINS_HOME}/config.xml" ]
then
   rerun jenkins: reload
fi

XMLSTARLET=$(which xmlstarlet)
if [ ! -x $XMLSTARLET ]
then
   rerun_die "cannot find xmlstarlet"
fi

if ! $XMLSTARLET fo "${JENKINS_HOME}/config.xml" > /dev/null
then
   rerun_die "configuration file ${JENKINS_HOME}/config.xml does not appear to be a valid xml file"
fi

xmlTmp1=$(mktemp)
xmlTmp2=$(mktemp)

#
# check if the specific jdk name exists already
# if it exists then DELETE it and re-CREATE it.
#
if $XMLSTARLET sel  -t -m "/hudson/jdks/jdk[name='${JDK_NAME}']/name"  -v . "${JENKINS_HOME}/config.xml" >/dev/null
then
   #echo "WARNING, /hudson/jdks/jdk/${JDK_NAME} appears to exist, re-creating" 1>&2
   $XMLSTARLET   ed -d "/hudson/jdks/jdk[name='${JDK_NAME}']/../jdk" "${JENKINS_HOME}/config.xml" \
   | $XMLSTARLET fo > "${xmlTmp1}"
else
   cp "${JENKINS_HOME}/config.xml" "${xmlTmp1}"
fi


#
# CREATE a new /hudson/jdks/jdk[name=${JDK_NAME}]
# create a temporary element "jdkTMP" to differentiate it from "jdk" element
# and rename it back to "jdk" after the new element and sub-elements have been created
#
$XMLSTARLET ed -s /hudson/jdks -t elem -n jdkTMP -v "" \
    -s //jdkTMP -t elem -n name -v "${JDK_NAME}" \
    -s //jdkTMP -t elem -n home -v "${JDK_HOME}" \
    -s //jdkTMP -t elem -n properties -v '' \
    -r //jdkTMP -v jdk ${xmlTmp1} | $XMLSTARLET fo > ${xmlTmp2}

#
# if the resulting transformation does not result in any change, do nothing.
#
if ! cmp -s "${xmlTmp2}" "${JENKINS_HOME}/config.xml"
then
   if ! sudo cp "${xmlTmp2}" "${JENKINS_HOME}/config.xml"
   then
      echo "unable to overwrite ${JENKINS_HOME}/config.xml" 1>&2
      exit 1
   fi
   rerun jenkins:reload
else
   echo "WARNING, ${JENKINS_HOME}/config.xml appears unchanged, will not overwrite" 1>&2
fi

rm -f "${xmlTmp1}" "${xmlTmp2}"

exit $?

# Done
