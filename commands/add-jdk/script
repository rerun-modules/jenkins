#!/usr/bin/env bash
#
#/ command: jenkins:add-jdk: "Adds a JDK installation to the Jenkins configuration"
#
#/ usage: rerun jenkins:add-jdk [options]
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: 

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Parse the command options.
[[ -r $RERUN_MODULE_DIR/commands/add-jdk/options.sh ]] && {
    . $RERUN_MODULE_DIR/commands/add-jdk/options.sh || rerun_die "Failed loading options parser."
    rerun_options_parse "$@"
}


# Error handling
# ---------------
# * Trap calls `rerun_die` with standard message.
# * Exit upon command errors or accessing unset variables.
#   * See [set](http://ss64.com/bash/set.html)
trap 'rerun_die "*** command failed: jenkins:add-jdk. ***"' ERR
set -o nounset -o pipefail


# ------------------------------
# Your implementation goes here.
# ------------------------------

if [ ! -f "${CONFIG_FILE}" ]
then
   rerun_die "configuration file ${CONFIG_FILE} does not appear to exist"
   exit 1
fi

XMLSTARLET=$(which xmlstarlet)
if [ ! -x $XMLSTARLET ]
then
   rerun_die "cannot find xmlstarlet"
   exit 1
fi

if ! $XMLSTARLET fo "${CONFIG_FILE}" > /dev/null
then
   rerun_die "configuration file ${CONFIG_FILE} does not appear to be a valid xml file"
   exit 1
fi

xmlTmp1=$(mktemp)
xmlTmp2=$(mktemp)

#
# check if the specific jdk name exists already
# if it exists then DELETE it and re-CREATE it.
#
if $XMLSTARLET sel  -t -m "/hudson/jdks/jdk[name='${JDK_NAME}']/name"  -v . "${CONFIG_FILE}" >/dev/null
then
   #echo "WARNING, /hudson/jdks/jdk/${JDK_NAME} appears to exist, re-creating" 1>&2
   $XMLSTARLET   ed -d "/hudson/jdks/jdk[name='${JDK_NAME}']/../jdk" "${CONFIG_FILE}" \
   | $XMLSTARLET fo > "${xmlTmp1}"
else
   cp "${CONFIG_FILE}" "${xmlTmp1}"
fi


#
# CREATE a new /hudson/jdks/jdk[name=${JDK_NAME}]
# create a temporary element "jdkTMP" to differentiate it from "jdk" element
# and rename it back to "jdk" after the new element and sub-elements have been created
#
$XMLSTARLET ed -s /hudson/jdks -t elem -n jdkTMP -v "" \
    -s //jdkTMP -t elem -n name -v "${JDK_NAME}" \
    -s //jdkTMP -t elem -n home -v "${JDK_HOME}" \
    -s //jdkTMP -t elem -n properties -v '' \
    -r //jdkTMP -v jdk ${xmlTmp1} | $XMLSTARLET fo > ${xmlTmp2}

#
# if the resulting transformation does not result in any change, do nothing.
#
if ! cmp -s "${xmlTmp2}" "${CONFIG_FILE}"
then
   if ! sudo cp "${xmlTmp2}" "${CONFIG_FILE}"
   then
      echo "unable to overwrite ${CONFIG_FILE}" 1>&2
      exit 1
   fi
else
   echo "WARNING, ${CONFIG_FILE} appears unchanged, will not overwrite" 1>&2
fi

rm -f "${xmlTmp1}" "${xmlTmp2}"

exit $?

# Done
